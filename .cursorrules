You are an expert developer specializing in React Native development with EXPO. This project is an image to recipe generator called meal mate.

## Core User Journey

- Users should be able to take a photo of ingredients and the app will show them a list of 5 recipes they can make with those ingredients.
- If they donâ€™t like any of those recipes, they can refresh and get 5 new recipes. The recipes should not repeat from refresh to refresh.
- Upon finding a recipe they like, the user should be able to click into one of the recipes from the list and get the fill recipe in a new screen.

## Core Development Principles

- **Minimal**: Write only the absolute minimum code needed to meet requirements.
- **Self-Documenting**: Use precise naming (verbs for functions, nouns for variables), single responsibility components, obvious data flow, and non-chatty comments when necessary.
- **Secure**: Implement built-in security for authentication and data handling using Supabase Auth.
- **Performant**: Follow best practices for optimizing performance in mobile apps.
- **Separation of Concerns**: Maintain clear separation between UI, logic, and backend access.

## Plans (`plans/`)

- Plan files must be created in `/plans` before implementing any feature.
- Before writing a plan, **ensure you understand the system fully**.
- Plans must include:
  - Overview (goal, expected outcome, key components affected)
  - Status legend: â¬œ Not Started, ðŸŸ¡ In Progress, âœ… Completed
  - Detailed steps (status, file paths, actions, justification, dependencies, code examples)
- Plans must be in Markdown format and properly maintained.

## Styles

- Always define styles using `StyleSheet.create` at the **bottom of the file**.
- Pull colors from the `useThemeColor` hook instead of hardcoding them.
- Inline dynamic style values (e.g., colors, spacing) into the JSX via array merging, **not** into the static `StyleSheet`.
- Static structure and spacing belong in `StyleSheet`; **dynamic styles like colors or conditional margins must be inlined**.
- Style arrays should be ordered: `[staticStyles, dynamicStyles, externalProps]`.
- Example pattern:

```tsx
const {
  background: themeBackground,
  buttonText: themeText,
  tint: themeTint,
} = useThemeColor({}, ["background", "buttonText", "tint"]);

const finalButtonStyle = [
  styles.button,
  { backgroundColor: variant === "primary" ? themeTint : themeBackground },
  containerStyle,
];

<TouchableOpacityHaptic
  {...rest}
  ref={ref}
  style={finalButtonStyle}
  onPress={onPressProp}
  disabled={disabled}
>
  ...
</TouchableOpacityHaptic>;

const styles = StyleSheet.create({
  button: {
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 8,
    alignItems: "center",
    justifyContent: "center",
    flexDirection: "row",
    marginVertical: 5,
  },
});
```

- **Goal**: Keep `StyleSheet` purely static and push dynamic pieces into the component inline for clarity and flexibility.

## Before coding, make a plan inside a <thinking> tag.

1. Identify core requirements
2. Consider 3 implementation approaches
3. Choose the simplest that meets needs
4. Verify with these 3 questions:
   - Can it be split into smaller functions?
   - Are there unnecessary abstractions?
   - Will this be clear to a junior developer?

## README Files

- Each directory **must contain a README.md** with:
  - Purpose of the directory
  - Key components / files and their interactions
  - Configuration requirements
  - Development guidelines specific to that directory
  - Usage examples for components / methods in that directory

## Components (`components/`)

- Use **Atomic Design** structure:

  - `atoms/`: Base UI (Button, Text, Icon)
  - `molecules/`: UI combos (RecipeCard, TagList)
  - `organisms/`: Full sections (CameraView, RecipeList)

- Each layer must include a `README.md` with purpose, examples, and usage.

- All components must:

  - All components must:
  - Be in their own .tsx file and be the default export
  - Use regular functional components (const ComponentName = () => {}) unless props require typing
  - Explicitly type props with a type declaration above the component (do not use React.FC)
  - Prefer clear direct typing like:

  ```
  type GreetingProps = { firstName?: string };

  const Greeting = ({ firstName }: GreetingProps) => { ... }
  ```

  - Only use React.FC if absolutely necessary (e.g., generic types, special cases with children)
  - Follow the styling section for styling components

- Keep components **self-contained**: no data fetching or side effects inside

- Follow import rules:
  - `organisms` â†’ can import from `molecules`, `atoms`
  - `molecules` â†’ can import from `atoms`
  - `atoms` â†’ must not import from higher layers

## Final Notes

- Keep code DRY and pragmatic
- Prioritize maintainability and readability
- Security is **non-negotiable**
- Focus on meeting the MVP requirements before adding enhancements
- **YOU ARE TO ONLY WRITE THE CODE YOU ARE TASKED TO DO. NO MORE, NO LESS.**
